#!/usr/bin/ruby

class Float
  def polarity
    return (self / self.abs).to_i
  end
end

require 'yaml'

def parse(io, &block)
  io.each_line do |line|
    line.gsub(/\#.*/,'')
    cols = line.split
    next if cols.length <= 0
    block.call(cols)
  end
end

def find_dim(io)
  dim = 0
  parse(io) do |cols|
    cols.shift
    cols.each do |d|
      ind,_ = *(d.split(/:/))
      ind = ind.to_i
      dim = ind + 1 if ind >= dim
    end
  end
  return dim
end

def libsvm_to_vec(io, dim, &block)
  labels  = IntVector.new
  vectors = FloatVectorVector.new
  parse(io) do |cols|
    vec = FloatVector.new(dim)
    lab = cols.shift.to_i
    cols.each do |d|
      ind,val = *(d.split(/:/))
      begin
        ind = ind.to_i
        next if ind >= dim
        vec[ind] = val.to_f
      rescue ArgumentError
        raise "'#{ind}:#{val}' at #{line} of #{io}"
      end
    end
    vectors << vec
    labels  << lab
    yield lab, vec if block
  end
  return [labels, vectors]
end

DATFILE  = 'train.dat'
CONFFILE = 'train.conf'
cmd = ARGV.shift or raise "Missing command: learn | predict"
case cmd
when 'construct' then
  system 'sh ./compile'
when 'setHyperparameter' then
  param = ARGV.shift or raise "Missing argument (hyperparameter)"
  param = Math.log10(param.to_f).to_i + 2 # convert { 0.01, 0.1, 1, 10, 100 } to { 0, 1, 2, 3, 4 }
  conf = {'iter' => (param * 3 + 1)**2}
  open(CONFFILE,'w') do |io|
    io.puts conf.to_yaml
  end  
when 'learn' then
  require 'TinyClassifier'
  include TinyClassifier
  inPath = ARGV.shift or raise "Missing argument (input file)"
  dim = find_dim(open(inPath))
  labels, vectors= libsvm_to_vec(open(inPath), dim)
  dim = vectors[0].size
  conf = YAML.load_file(CONFFILE)
  conf['dim'] = dim
  conf['iter'] ||= 10
  machine = FloatPerceptron.new(dim, conf['iter'].to_i)
  conf['it'] = machine.train(vectors, labels)
  machine.store(DATFILE)
  open(CONFFILE,'w') do |io|
    io.puts conf.to_yaml
  end
when 'predict' then
  require 'TinyClassifier'
  include TinyClassifier
  inPath = ARGV.shift or raise "Missing argument (input file)"
  outPath = ARGV.shift or raise "Missing argument (output file)"
  conf = YAML.load_file(CONFFILE)
  machine = FloatPerceptron.new(conf['dim'].to_i, conf['iter'].to_i)
  machine.load(DATFILE)
  out = open(outPath, "w")
  libsvm_to_vec(open(inPath), conf['dim']) do |_,vec|
    out.puts machine.predict(vec).polarity 
  end
  out.close
end
